/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.16.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.fhtechnikum.paperless.controller;

import com.fhtechnikum.paperless.services.dto.Document;
import org.springframework.lang.Nullable;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-15T10:41:16.708431591Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
@Validated
@Tag(name = "paperless", description = "Paperless Document Management REST-API")
public interface PaperlessApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_DELETE_DOCUMENT = "/api/documents/{id}";
    /**
     * DELETE /api/documents/{id} : Delete a document by id
     *
     * @param id The id of the document (required)
     * @return Document deleted successfully (status code 204)
     *         or Document does not exist with this id! (status code 404)
     */
    @Operation(
        operationId = "deleteDocument",
        summary = "Delete a document by id",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Document deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Document does not exist with this id!")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = PaperlessApi.PATH_DELETE_DOCUMENT
    )
    
    default ResponseEntity<Void> deleteDocument(
        @NotNull @Parameter(name = "id", description = "The id of the document", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_DOCUMENT = "/api/documents/{id}";
    /**
     * GET /api/documents/{id} : Retrieve a document by id
     *
     * @param id The id of the document (required)
     * @return Success (status code 200)
     *         or Document does not exist with this id! (status code 404)
     */
    @Operation(
        operationId = "getDocument",
        summary = "Retrieve a document by id",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "404", description = "Document does not exist with this id!")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = PaperlessApi.PATH_GET_DOCUMENT,
        produces = { "application/json" }
    )
    
    default ResponseEntity<Document> getDocument(
        @NotNull @Parameter(name = "id", description = "The id of the document", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fileSize\" : 6, \"author\" : \"author\", \"id\" : 0, \"mimeType\" : \"mimeType\", \"title\" : \"title\", \"content\" : \"content\", \"originalFilename\" : \"originalFilename\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_DOCUMENTS = "/api/documents";
    /**
     * GET /api/documents : Returns a list of documents
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocuments",
        summary = "Returns a list of documents",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = PaperlessApi.PATH_GET_DOCUMENTS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Document>> getDocuments(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fileSize\" : 6, \"author\" : \"author\", \"id\" : 0, \"mimeType\" : \"mimeType\", \"title\" : \"title\", \"content\" : \"content\", \"originalFilename\" : \"originalFilename\" }, { \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fileSize\" : 6, \"author\" : \"author\", \"id\" : 0, \"mimeType\" : \"mimeType\", \"title\" : \"title\", \"content\" : \"content\", \"originalFilename\" : \"originalFilename\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPDATE_DOCUMENT = "/api/documents/{id}";
    /**
     * PUT /api/documents/{id} : Update a document by id
     *
     * @param id The id of the document (required)
     * @param document  (required)
     * @return Success (status code 200)
     *         or Document does not exist with this id! (status code 404)
     */
    @Operation(
        operationId = "updateDocument",
        summary = "Update a document by id",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "404", description = "Document does not exist with this id!")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = PaperlessApi.PATH_UPDATE_DOCUMENT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Document> updateDocument(
        @NotNull @Parameter(name = "id", description = "The id of the document", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Document", description = "", required = true) @Valid @RequestBody Document document
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fileSize\" : 6, \"author\" : \"author\", \"id\" : 0, \"mimeType\" : \"mimeType\", \"title\" : \"title\", \"content\" : \"content\", \"originalFilename\" : \"originalFilename\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPLOAD_DOCUMENT = "/api/documents";
    /**
     * POST /api/documents : Upload a new document
     *
     * @param file The document file (PDF, DOCX, TXT, etc.) (required)
     * @param title Optional document title (optional)
     * @param author Optional document author (optional)
     * @return Document successfully uploaded. (status code 201)
     *         or Document upload failed due to bad request! (status code 400)
     */
    @Operation(
        operationId = "uploadDocument",
        summary = "Upload a new document",
        tags = { "paperless" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Document successfully uploaded.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            }),
            @ApiResponse(responseCode = "400", description = "Document upload failed due to bad request!")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = PaperlessApi.PATH_UPLOAD_DOCUMENT,
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<Document> uploadDocument(
        @Parameter(name = "file", description = "The document file (PDF, DOCX, TXT, etc.)", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "title", description = "Optional document title") @Valid @RequestParam(value = "title", required = false) String title,
        @Parameter(name = "author", description = "Optional document author") @Valid @RequestParam(value = "author", required = false) String author
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fileSize\" : 6, \"author\" : \"author\", \"id\" : 0, \"mimeType\" : \"mimeType\", \"title\" : \"title\", \"content\" : \"content\", \"originalFilename\" : \"originalFilename\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
